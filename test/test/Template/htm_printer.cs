#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test.Template
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class htm_printer : htm_printerBase
{

#line hidden

public override void Execute()
{
WriteLiteral("<html>\n<head>\n    <style>\n        body {\n            font-family: \"Manrope\";\n    " +
"        margin: 0px;\n            padding: 0px;\n        }\n\n        .section-one {" +
"\n            width: 100%;\n            display: flex;\n            flex-direction:" +
" row;\n            height: 80%;\n        }\n\n        .img-photo {\n            width" +
": 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n\n    " +
"    .img-logo {\n            position: absolute;\n            top: 50%;\n          " +
"  left: 50%;\n            transform: translate(-50%, -50%);\n            height: 1" +
"00%;\n            max-height: 30px;\n            width: 100%;\n            max-widt" +
"h: 80%;\n            background-size: contain;\n            background-repeat: no-" +
"repeat;\n            background-position: center;\n        }\n\n        .visitor-con" +
"tent-text {\n            height: 100%;\n            padding-left: 15px;\n          " +
"  display: flex;\n            flex-direction: column;\n            justify-content" +
": space-around;\n        }\n\n        .visitor-type {\n            padding-top: 6px;" +
"\n            padding-left: 15px;\n            font-size: 22px;\n            font-w" +
"eight: bold;\n            color: white;\n        }\n\n        .visitor-photo-column " +
"{\n            display: none;\n        }\n\n        .has-photo .visitor-photo-column" +
" {\n            width: 40%;\n            display: flex;\n        }\n\n        .visito" +
"r-company-logo-column {\n            width: 40%;\n        }\n\n        .visitor-info" +
"-column {\n            width: 100%;\n        }\n\n        .has-photo .visitor-info-c" +
"olumn {\n            width: 60%;\n        }\n\n        .visitor-type-column {\n      " +
"      width: 60%;\n        }\n\n        .position-img {\n            position: relat" +
"ive;\n        }\n\n        .section-one .visitor-name {\n            font-size: 15px" +
";\n            font-weight: bold;\n        }\n\n        .has-photo.section-one .visi" +
"tor-name {\n            font-size: 12px;\n        }\n\n        .section-one .visitor" +
"-company {\n            font-size: 11px;\n        }\n\n        .has-photo.section-on" +
"e .visitor-company {\n            font-size: 10px;\n        }\n\n        .section-on" +
"e .title-hostname {\n            font-size: 15px;\n            font-weight: bold;\n" +
"        }\n\n        .has-photo.section-one .title-hostname {\n            font-siz" +
"e: 12px;\n        }\n\n        .section-one .hostname {\n            font-size: 12px" +
";\n        }\n\n        .has-photo.section-one .hostname {\n            font-size: 1" +
"0px;\n        }\n\n        .section-one .day-of-visit {\n            font-size: 15px" +
";\n        }\n\n        .has-photo.section-one .day-of-visit {\n            font-siz" +
"e: 12px;\n        }\n\n        .section-two {\n            width: 100%;\n            " +
"display: flex;\n            flex-direction: row;\n            height: 20%;\n       " +
" }\n\n        .visitor-type-column {\n            background-color: red;\n        }\n" +
"\n        .is-contractor .visitor-type-column {\n            background-color: #c7" +
"c7c7;\n        }\n\n        .t-ellipsis {\n            white-space: nowrap;\n        " +
"    overflow: hidden;\n            text-overflow: ellipsis;\n        }\n    </style" +
">\n</head>\n\n<body");

WriteLiteral(" class=\"\"");

WriteLiteral(">\n    <div");

WriteLiteral(" class=\"section-one\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"visitor-photo-column\"");

WriteLiteral(">\n            <img");

WriteLiteral(" class=\"img-photo\"");

WriteLiteral(" src=\"data:image/png;base64,\"");

WriteLiteral(" />\n        </div>\n\n        <div");

WriteLiteral(" class=\"visitor-info-column\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"visitor-content-text\"");

WriteLiteral(">\n                <div>\n                    <div");

WriteLiteral(" class=\"visitor-name t-ellipsis\"");

WriteLiteral(">John Smith</div>\n                </div>\n\n                <div>\n                 " +
"   <div");

WriteLiteral(" class=\"title-hostname\"");

WriteLiteral(">Visiting:</div>\n                    <div");

WriteLiteral(" class=\"hostname t-ellipsis\"");

WriteLiteral(">Hau Vu</div>\n                </div>\n\n                <div");

WriteLiteral(" class=\"day-of-visit\"");

WriteLiteral(">May 18, 2023</div>\n            </div>\n        </div>\n    </div>\n\n    <div");

WriteLiteral(" class=\"section-two\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"visitor-company-logo-column position-img\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"img-logo\"");

WriteLiteral("\n                 style=\"\n            background-image: url(\'data:image/png;base6" +
"4,iVBORw0KGgoAAAANSUhEUgAAAewAAABmCAMAAAA+qFJYAAAAqC\');\n          \"");

WriteLiteral("></div>\n        </div>\n\n        <div");

WriteLiteral(" class=\"visitor-type-column\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"visitor-type\"");

WriteLiteral(">Visitor</div>\n        </div>\n    </div>\n</body>\n</html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class htm_printerBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
